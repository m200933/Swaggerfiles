swagger: '2.0'
info:
  title: Basket APIs
  description: Basket API service specification
  version: 2.0.0
host: api.vodafone.com
schemes:
  - http
basePath: /api/v1
produces:
  - application/json

paths:
   /basket/basket:
    post:
      summary: Creates a basket based on the input payload.
      description: This service creates a basket by taking an input payload and gives a basketId as response.
      operationId: BSKT_001-CreateBasket
      parameters:
        - name: createBasketRequest
          in: body
          description: package to be added to basket
          required: true
          schema:
              $ref: '#/definitions/CreateBasketRequest'
      tags:
        - Basket
      responses:
        '201':
          description: Success
          schema: 
            $ref: '#/definitions/Basket'
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'

   /basket/basket/{basketId}:
    get:
      summary: Get the basket details for the given basket Id
      description: The service gets the details of the basket along with the necessary information on all its current packages in the response.
      operationId: BSKT_002-ReadBasket
      parameters:
        - name: basketId
          in: path
          description: Unique Id of the basket being requested
          required: true
          type: string
          format: guid
      tags:
        - Basket
      responses:
        '200':
          description: Success
          schema: 
            $ref: '#/definitions/Basket'
        '404':
          description: Not found
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'
    put:
      summary: Udpates the basket services
      description: The service updates the basket level attributes and does not update the individual package contents. This operation is currently exposed as a 'PUT' but would later be changed to a 'PATCH'. 
      operationId: BSKT_003-UpdateBasket
      parameters:
        - name: basketId
          in: path
          description: Unique Id of the basket being requested
          required: true
          type: string
          format: guid
        - name: updateBasketRequest
          in: body
          description: package to be added to basket
          required: true
          schema:
              $ref: '#/definitions/UpdateBasketRequest'
      tags:
        - Basket
      responses:
        '200':
          description: Success
          schema: 
            $ref: '#/definitions/Basket'
        '404':
          description: Not found
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'
    delete:
      summary: Deletes the basket along with all of its content
      description: The service deletes the basket and all of its contents for the given basket Id.
      operationId: BSKT_003-DeleteBasket
      parameters:
        - name: basketId
          in: path
          description: Unique Id of the basket being requested
          required: true
          type: string
          format: guid
      tags:
        - Basket
      responses:
        '204':
          description: No Content
        '404':
          description: Not found
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'
   /basket/basket/{basketId}/checkout:
    get:
      summary: Get the basket details for the given basket Id
      description: The service gets the details of the basket along with the necessary information on all its current packages in the response.
      operationId: BSKT_005-ReadBasket
      parameters:
        - name: basketId
          in: path
          description: Unique Id of the basket being requested
          required: true
          type: string
          format: guid
      tags:
        - Basket
      responses:
        '200':
          description: Success
          schema: 
            $ref: '#/definitions/CheckOutBasket'
        '404':
          description: Not found
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'
   /basket/basket/{basketId}/validate:
    post:
      summary: Validate the basket contents
      description: The service applied compatability and eligibility rules on the packages and products available in the basket
      operationId: BSKT_004-ValidateBasket
      parameters:
        - name: basketId
          in: path
          description: Unique Id of the basket being requested
          required: true
          type: string
          format: guid
      tags:
        - Basket
      responses:
        '200':
          description: Success
          schema: 
            $ref: '#/definitions/ValidateBasketResponse'
        '404':
          description: Not found
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'

   /basket/basket/{basketId}/empty:
    post:
      summary: Deletes the Basket content
      description: The service deletes the packages of basket and basket will remain persist
      operationId: BSKT_005-EmptyBasket
      parameters:
        - name: basketId
          in: path
          description: Unique Id of the basket being requested
          required: true
          type: string
          format: guid
      tags:
        - Basket
      responses:
        '204':
          description: No Content
        '404':
          description: Not found
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'


   /basket/basket/{basketId}/package:
    post:
      summary: Create a new package
      description: 'The service creates a new package for an existing  basket and provides the package Id in the response.'
      operationId: BSKT_004-CreatePackage
      parameters:
        - name: basketId
          in: path
          description: 'Unique Id of the basket for which a new package would be created' 
          required: true
          type: string
          format: guid
        - name: addPackageRequest
          in: body
          description: 'Package to be added to basket'
          required: true
          schema:
           $ref: '#/definitions/AddPackage'
      tags:
        - Package
      responses:
        '201':
          description: Success
          schema: 
            $ref: '#/definitions/CreatePackageResponse'
        '404':
          description: Not found
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'

   /basket/basket/{basketId}/package/{packageId}:
    put:
      summary: Update an existing package
      description: The service udpates an existing package of an existing  basket. This operation is currently exposed as a 'PUT' but would later be changed to a 'PATCH'.
      operationId: BSKT_004-UpdatePackage
      parameters:
        - name: basketId
          in: path
          description: 'Unique Id of the basket' 
          required: true
          type: string
          format: guid
        - name: packageId
          in: path
          description: 'Unique Id of the package being updated' 
          required: true
          type: string
          format: guid
        - name: updatePackageRequest
          in: body
          description: 'Package to be added to basket'
          required: true
          schema:
           $ref: '#/definitions/UpdatePackage'
      tags:
        - Package
      responses:
        '200':
          description: Success
          schema: 
            $ref: '#/definitions/Package'
        '404':
          description: Not found
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'
    delete:
      summary: Deletes an existing package
      description: 'The service deletes an existing package from the given basket.'
      operationId: BSKT_004-DeletePackage
      parameters:
        - name: basketId
          in: path
          description: 'Unique Id of the basket' 
          required: true
          type: string
          format: guid
        - name: packageId
          in: path
          description: 'Unique Id of the package requested for deletion' 
          required: true
          type: string
          format: guid
      tags:
        - Package
      responses:
        '204':
          description: Success
           
        '404':
          description: Not found
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'
   /basket/basket/{basketId}/package/{packageId}/product:
    post:
      summary: Adding a extra/Accesory to  an existing package
      description: The service udpates an existing package of an existing  basket. 
      operationId: BSKT_004-AddExtra
      parameters:
        - name: basketId
          in: path
          description: 'Unique Id of the basket' 
          required: true
          type: string
          format: guid
        - name: packageId
          in: path
          description: 'Unique Id of the package being updated' 
          required: true
          type: string
          format: guid
        - name: addProductRequest
          in: body
          description: 'Product to be added to Package '
          required: true
          schema:
           $ref: '#/definitions/Product'
      tags:
        - Package
      responses:
        '201':
          description: Success
          schema: 
            $ref: '#/definitions/AddProductResponse'
        '404':
          description: Not found
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'
   /basket/basket/{basketId}/package/{packageId}/productLine/{productLineId}:
     delete:
      summary: Deletes an existing package extra and accesories
      description: 'The service deletes an existing extra and accesories from the given package.'
      operationId: BSKT_004-DeleteExtra
      parameters:
        - name: basketId
          in: path
          description: 'Unique Id of the basket' 
          required: true
          type: string
          format: guid
        - name: packageId
          in: path
          description: 'Unique Id of the package' 
          required: true
          type: string
          format: guid
        - name: productLineId
          in: path
          description: 'Unique Id of the extra' 
          required: true
          type: string
          format: guid
        
      tags:
        - Package
      responses:
        '204':
          description: Success
           
        '404':
          description: Not found
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'
   /basket/basket/{basketId}/voucher/{voucherCode}:
    put:
      summary: Apply Voucher to the Basket Service
      description: 'The service updates the basket price by applying the Voucher.'
      operationId: BSKT_003-ApplyVoucher
      parameters:
        - name: basketId
          in: path
          description: Unique Id of the basket being requested
          required: true
          type: string
          format: guid
        - name: voucherCode
          in: path
          description: Voucher to be added to basket
          required: true
          type: string
          format: guid
        - name: force
          in: query
          description: 'if there is conflit you need to apply voucher you need to pass true do not use voucher please pass false first type do not pass.'
          required: false
          type: boolean
          format: guid
          
      tags:
        - Basket
      responses:
        '200':
          description: Success
          schema: 
            $ref: '#/definitions/Basket'
        '404':
          description: Not found
        '409':
          description: Conflict
          schema: 
            $ref: '#/definitions/ApplyVoucherResponse'
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'
      
   
    delete:
      summary: Remove Voucher to the Basket Service
      description: The service updates the basket price by removeing the Voucher.
      operationId: BSKT_003-RemoveVoucher
      parameters:
        - name: basketId
          in: path
          description: Unique Id of the basket being requested
          required: true
          type: string
          format: guid
        - name: voucherCode
          in: path
          description: Voucher to be removed from basket
          required: true
          type: string
          format: guid
          
      tags:
        - Basket
      responses:
        '200':
          description: Success
          schema: 
            $ref: '#/definitions/Basket'
        '404':
          description: Not found
        '500':
          description: Internal Server Error
          schema: 
            $ref: '#/definitions/Error'  

definitions:

  CreateBasketRequest:
    type: object
    properties:
      affiliateId:
        type: string
        description: 'Id of affiliate from which the basket creation was invoked'
      source:
        type: string
        description: 'Source system identifier (OnlineShop, MobileShop etc)'
      customerRequestedDate:
        type: string
        format: yyyy-mm-ddTHH:MM:SS.SSSZ
        description: 'Service request date specified by the customer'
      returnURL:
        type: string
        description: 'WCS URL to be used by checkout to redirect back'
      packages:
        type: array
        items:
          $ref: '#/definitions/AddPackage'

  UpdateBasketRequest:
    type: object
    properties:
      customerRequestedDate:
        type: string
        format: yyyy-mm-ddTHH:MM:SS.SSSZ
        description: 'Service request date specified by the customer'
      metadata: 
        $ref: '#/definitions/Metadata'
      customer:
        $ref: '#/definitions/Customer'
      vetOutcome:
        $ref: '#/definitions/VetOutcome' 
      deliveryInfo:
        $ref: '#/definitions/DeliveryInfo'
      voucherCode:
         type: string
         description: 'voucher code  specified by the customer'
      removeVoucherCode:
         type: boolean
         description: ' remove the voucher code  specified by the customer if you pass true we will remove the voucher from basket'
         
  
  ApplyVoucherResponse:
    type: object
    properties:
      voucherCode:
         type: string
         description: 'voucher code  specified by the customer'
      voucherDescprition:
         type: string
         description: 'voucher Descrption  specified by the customer'
      promotionsWithConflict:
         type: array
         items:
          $ref: '#/definitions/promotionWithConflict'
      promotionSavingAmount:
         type: string
      voucherSavingsAmount:
         type: string
      
         
      
  promotionWithConflict:
    type: object
    properties:
      packageId:
       type: string
      packageLineId:
       type: string
      merchandisingPromotions:
        $ref: '#/definitions/MerchandisingPromotion'
      savingsAmount:
       type: string
      
      
  ValidateBasketResponse:
    type: object
    properties:
      result:
        type: boolean
        description: 'Result of the basket validation. True if all rules are passed, false otherwise'
      details:
        $ref: '#/definitions/ValidationResultDetails'

  ValidationResultDetails:
    type: object
    properties:
      subject:
        $ref: '#/definitions/ProductForValidation'
      incompatibleWith:
        type: array
        items:
          $ref: '#/definitions/ProductForValidation'


  ProductForValidation:
    type: object
    properties:
      productId:
        type: string
        description: 'Service request date specified by the customer'
      productName:
        type: string
        description: 'Name of the product'
      packageLineId:
        type: string
        description: 'Service request date specified by the customer'
      packageSequence:
        type: integer
        description: 'Package sequence number as available in get basket operation'


  CreatePackageResponse:
    type: object
    description: 'Package ID for the new package created'
    properties:
      packageId:
       type: string
       
  AddProductResponse:
    type: object
    description: 'Product is added scussfully to package'
    properties:
      productLineId:
       type: string

  AddPackage:
    type: object
    properties:
      packageType:
        type: string
        description: 'Type of the package. Possible list is "Acquisition", "Retention", "TariffMigration", "PreToPost", "Modify"'
      accountCategory:
        type: string
        description: 'If the package was constructed in a segment sensitive way, this field contains the segment (example customer or business)'
      bundle:
        $ref: '#/definitions/AddProduct'
      hardwares:
        type: array
        items:
          $ref: '#/definitions/AddProduct'
      services:
        type: array
        items:
          $ref: '#/definitions/AddProduct'

  UpdatePackage:
    type: object
    properties:
      packageType:
        type: string
        description: 'Type of the package. Possible list is "Acquisition", "Retention", "TariffMigration", "PreToPost", "Modify"'
      accountCategory:
        type: string
        description: 'If the package was constructed in a segment sensitive way, this field contains the segment (example customer or business)'
      bundle:
        type: array
        items:
          $ref: '#/definitions/UpdateBundle'
      hardwares:
        type: array
        items:
          $ref: '#/definitions/UpdateDevice'
      sevices:
        type: array
        items:
          $ref: '#/definitions/UpdateDevice'
  
  Product:
    type: object
    properties:
      skuId:
        type: string
        description: 'Product id from the product catalogue'
      productType:
        type: string
        description: 'Product type of should be SERVICE/HARDWARE '  
  
  AddProduct:
    type: object
    properties:
      action:
        type: string
        description: 'Action to indicate the operation requested by the use on this particular bundle. Expected values are ADD/REMOVE/MODIFY'
      skuId:
        type: string
        description: 'Product id from the product catalogue'
      attributes:
        type: array
        items:
         $ref: '#/definitions/attribute'
  attribute:
    type: object
    properties:
      name:
       type: string
       description: 'use the name of the attribute'
      value:
       type: string
       description: 'use the value  of the attribute'
       

  UpdateBundle:
    type: object
    properties:
      productLineId:
        type: string
        format: guid
        description: 'Unique id for this line item of the package. This field would be populated only if an existing bundle in the package is to be modified.'
      action:
        type: string
        description: 'Action to indicate the operation requested by the use on this particular bundle. Expected values are ADD/REMOVE/MODIFY'
      skuId:
        type: string
        description: 'Bundle id from the product catalogue'


  UpdateDevice:
    type: object
    properties:
      productLineId:
        type: string
        format: guid
        description: 'Unique id for this line item of the package. This field would be populated only if an existing device in the package is to be modified.'
      action:
        type: string
        description: 'Expected list is ADD/REMOVE/MODIFY'
      skuId:
        type: string
        format: guid
        description: 'Id of the device as given in the product catalogue'
  
  Basket:
    type: object
    properties:
      basketId:
        type: string
        format: guid
        description: 'Unique identifier for a basket'
      affiliateId:
        type: string
        description: 'Id of affiliate from which the basket creation was invoked'
      source:
        type: string
        description: 'Source system identifier (WCS, MOBAPP etc)'
      customerRequestedDate:
        type: string
        format: yyyy-mm-ddTHH:MM:SS.SSSZ
        description: 'Service request date specified by the customer'
      metadata: 
        $ref: '#/definitions/Metadata'
      customer:
        $ref: '#/definitions/Customer'
      packages:
        type: array
        items:
          $ref: '#/definitions/Package'
      vetOutcome:
        $ref: '#/definitions/VetOutcome'      
      priceDetails:
        $ref: '#/definitions/PriceDetails'
      totalOneoffPriceSaving:
        description: 'total Oneoff price Saving for basket'
        type: string
      totalMonthlyPriceSaving:
        description: 'total Monthly price Saving for basket'
        type: string
      deliveryInfo:
        $ref: '#/definitions/DeliveryInfo'
      voucherCode:
         type: string
         description: 'voucher code  specified by the customer'
      voucherDescription:
         type: string
         description: 'voucher code  description'
      validated:
        type: boolean
      hashvalue:
        type: string

  DeliveryInfo:
    type: object
    properties:
      skuId:
        type: string
        description: 'Sku ID of the delivery product'
      displayName:
        type: string
        description: 'Display name of the delivery sku'
      deliveryType:
        type: string
        description: 'Standard, Click & Collect, Deliver to Store or Premium'
      stockStatus:
        type: string
        description: 'Represents the stock status. possible values instock,outofstock,preorder,backorder'
      availableFrom:
        type: string
        description: 'Availability of the stock as per the selected delivery method'
      storeInfo:
        $ref: '#/definitions/StoreInfo'
      price:
        $ref: '#/definitions/Price'


  StoreInfo:
    type: object
    properties:
      storeId:
        type: string
        description: 'Sku ID of the delivery product'
      storeName:
        type: string
        description: 'Store ID selected by the user for click and collect'
      storeAlias:
        type: string
        description: 'Store ID selected by the user for click and collect'


  Metadata:
    type: object
    properties:
      returnURL:
        type: string
        description: 'WCS URL to be used by checkout to redirect back'
      basketStatus:
        type: string
        description: 'Status of the basket. Expected list of values; INCOMPLETE, IN_CHECKOUT, PROCESSING, PENDING_CUSTOMER_ACTION, SUBMITTED'
      salesOrderId:
        type: string
        description: 'Order Id of the siebel order created for this basket'
      reason:
        type: string
        description: 'Reason - to be set by checkout process along with basket status'

  Customer:
    type: object
    properties:
      contactId:
        type: string
        description: 'The contactId of the user building the order. Blank if anonymous'
      ownedAccounts:
        type: array
        items:
          type: string
            
  
  Package:
    type: object
    properties:
      packageId:
        type: string
        format: guid
        description: 'Unique ID for the package'
      accountCategory:
        type: string
        description: 'If the package was constructed in a segment sensitive way, this field contains the segment (example customer or business)'
      sequence:
        type: integer
        format: int32
        description: 'Display sequence.  Make this the order the package was added to the basket (i.e. lowest number = highest display order)'
      packageType:
        type: string
        description: 'Type of the package. Possible list is "Acquisition", "Retention", "TariffMigration", "PreToPost", "Modify"'
      removable:
        type: boolean
        description: 'Flag to indicate if this package can be removed without affecting the integrity of the basket'
      dependentOn:
        type: array
        items:
          type: string
        description: 'List of package Ids on which this package is dependent on'
      bundle:
          $ref: '#/definitions/Bundle'
      hardwares:
        type: array
        items:
          $ref: '#/definitions/Hardware'
      services:
        type: array
        items:
          $ref: '#/definitions/Service'
      discounts:
        type: array
        items:
          $ref: '#/definitions/Discount' 
      priceDetails:
        $ref: '#/definitions/PriceDetails'
 
  Bundle:
    type: object
    properties:
      packageLineId:
        type: string
        format: guid
        description: 'unique id for this line item of the package'
      action:
        type: string
        description: 'Action to indicate the operation requested by the use on this particular bundle. Expected values are ADD/REMOVE/MODIFY'
      skuId:
        type: string
        description: 'Bundle id from the product catalogue'
      name:
        type: string
        description: 'Name of the bundle as provided in the product catalogue'
      description:
        type: string
        description: 'Description of the bundle as provided in the product catalogue '
      displayName:
        type: string
        description: 'Name of the bundle as provided in the merchandising data'
      displayDescription:
        type: string
        description: 'Description of the bundle as provided in the merchandising data'
      bundleClass:
        type: string
        description: 'Catalogue product class identifies products - SIMO, HANDSET etc.'
      productClass:
        type: string
        description: 'Catalogue product class identifies products'
      paymentType:
        type: string
        description: 'Payment type of the bundle. For example, "postpaid", "prepaid" etc.'
      bundleType: 
        type: string
        description: 'Type of the bundle. For example, Standard, Red, RedPlus etc.'
      commitmentPeriod: 
        $ref: '#/definitions/CommitmentPeriod'
      displayOrder:
        type: integer
        format: int32
        description: 'Will be the "order" priority of the product from the catalogue'
      showInSummary:
        type: boolean
        description: 'Flag to indicate whether the product should be shown in basket summary'  
      allowances: 
        type: array
        items:
          $ref: '#/definitions/Allowance'
      merchandisingMedia:
        type: array
        items:
          $ref: '#/definitions/MediaLink'
      attributes:
        type: array
        items:
         $ref: '#/definitions/attribute'
      priceDetails:
        $ref: '#/definitions/BundlePrice'

  CommitmentPeriod:
    type: object
    properties:
      uom:
        type: string
        description: 'Unit of measurement for the commitment period'
      value:
        type: string
        description: 'Value for the commitment period'

  Service:
    type: object
    properties:
      packageLineId:
        type: string
        format: guid
        description: 'line id of the bundle in the package'
      action:
        type: string
        description: 'Expected list is ADD/REMOVE/MODIFY'
      skuId:
        type: string
        format: guid
        description: 'Id of the device as given in the product catalogue'
      name:
        type: string
        description: 'Name of the device as provided in the product catalogue'
      description:
        type: string
        description: 'Description of the device as provided in the product catalogue'
      displayName:
        type: string
        description: 'Name of the device as provided in the merchandising data'
      displayDescription:
        type: string
        description: 'Description of the device as provided in the merchandising data'
      specificationGroup: 
        type: array
        items:
          $ref: '#/definitions/Specifications'
      merchandisingMedia:
        type: array
        items:
          $ref: '#/definitions/MediaLink'
      attributes:
        type: array
        items:
         $ref: '#/definitions/attribute'
      priceDetails:
        $ref: '#/definitions/ServicePrice'

  Hardware:
    type: object
    properties:
      packageLineId:
        type: string
        format: guid
        description: 'line id of the bundle in the package'
      action:
        type: string
        description: 'Expected list is ADD/REMOVE/MODIFY'
      skuId:
        type: string
        format: guid
        description: 'Id of the device as given in the product catalogue'
      name:
        type: string
        description: 'Name of the device as provided in the product catalogue'
      description:
        type: string
        description: 'Description of the device as provided in the product catalogue'
      displayName:
        type: string
        description: 'Name of the device as provided in the merchandising data'
      displayDescription:
        type: string
        description: 'Description of the device as provided in the merchandising data'
      deviceBriefDescription: 
        type: array
        items:
          $ref: '#/definitions/DeviceBriefDescription'
      deviceColor:
        type: string
        description: 'Color of the HandSet'
      memorySize:
        type: string
        description: 'Storage Capacity of the Device'
      make:
        type: string
        description: 'Device company name'
      model:
        type: string
        description: 'Device Model'
      groupType:
        type: string
        description: 'Device group type'
      productClass:
        type: string
        description: 'Catalogue product class (identifies e.g. Delivery products)'
      displayOrder:
        type: integer
        format: int32
        description: 'Will be the "order" priority of the product from the catalogue'
      showInSummary:
        type: boolean
        description: 'Should the product be shown in basket summary'  
      merchandisingMedia:
        type: array
        items:
          $ref: '#/definitions/MediaLink'
      attributes:
        type: array
        items:
         $ref: '#/definitions/attribute'
      priceDetails:
        $ref: '#/definitions/HardwarePrice'

  Discount:
    type: object
    properties:
      productLineId:
        type: string
        format: guid
        description: 'line id of the discount in the package'
      action:
        type: string
        description: 'Expected list is ADD/REMOVE/MODIFY'
      skuId:
        type: string
        format: guid
        description: 'Id of the discount as given in the product catalogue'
      tag:
        type: string
        description: 'Name of the discount as provided in the product catalogue'
      label:
        type: string
        description: 'Label of the discount as provided in the product catalogue'
      tenure:
        type: string
        description: 'Tenure of the discount as provided in the product catalogue (can possibly take the values - PARTIAL or FULL)'
      duration:
        type: string
        description: 'Duration from the start of the subscription for which the discount would be applicable'
      confirmedRequired:
        type: string
        description: 'Flag to indicate whether user consent should be taken before applying the discount'
      merchandisingMedia:
        type: array
        items:
          $ref: '#/definitions/MediaLink'
      discountValue:
        $ref: '#/definitions/DiscountValue'

  DiscountValue:
    type: object
    properties:
      type:
        type: string
        description: 'Discount type - "PERCENTAGE" or "GBP"'
      value:
        type: string
        description: 'Discount value'

  Allowance:
    type: object
    properties:
      type:
        type: string
        description: 'Allowance type - "DATA","TEXT","CALL. Roaming"'
      value:
        type: string
        description: 'Value of the allowance'
      uom:
        type: string
        description: 'Unit of measurement to be used for the allowance - "MB" for DATA. "COUNT" fpr TEXT amd "MIN" for CALL'
      displayUom:
        type: string
        description: 'Unit of measurement to be used for the allowance - "MB" for DATA. "COUNT" fpr TEXT amd "MIN" for CALL'
      tilUom:
        type: string
        description: 'Unit of measurement to be used for the allowance - "MB" for DATA. "COUNT" fpr TEXT amd "MIN" for CALL'
        
  
  DeviceBriefDescription:
    type: object
    properties:
      key:
        type: string
        description: ' - "UPS1",""UPS2","UPS3","UPS4",'
      value:
        type: string
        description: 'Value of the Descriptions - "4G ready","Seamless performance","Premium design","Ultra power saving mode"'
      type:
        type: string
        description: 'Device Description types"'
      valueUOM:
        type: string
        description: 'Unit of measurement for value'
        
  Specifications:
    type: object
    properties:
      name:
        type: string
        description: ' Value of the Descriptions - "Worldwide cover (30 days)","Theft","Loss"'
      value:
        type: string
        description: 'Value of the Descriptions - "Yes","No"'
      specPriority:
        type: string
        description: ' - priporty of the specfication'
      comparable:
        type: string
        description: ' value of Comparable -"Yes" , "No"'
      iskey:
        type: string
        description: ' is the key sample value are -"Yes" , "No"'
      valueType:
        type: string
        description: 'Value of types--"boolean"'
      valueUOM:
        type: string
        description: 'Unit of measurement for value'
      footnote:
        type: string
        description: 'footNote'
      description:
        type: string
        description: ' Specfication Description '
      
    
  MediaLink:
    type: object
    properties:
      id: 
        type: string
        description: 'Unique id given for this link which provide a reference for UI to place this on the screen'
      value:
        type: string
        description: 'URL Link from the content site for the media'
      type:
        type: string
        description: 'Will provide UI information on the type of the link (like URL)'

  PriceDetails:
    type: object
    properties:
      oneOffPrice:
        $ref: '#/definitions/Price'
      oneOffDiscountPrice:
        $ref: '#/definitions/Price'
      monthlyPrice:
        $ref: '#/definitions/Price'
      monthlyDiscountPrice:
        $ref: '#/definitions/Price'
      stepPrices:
        type: array
        items:
          $ref: '#/definitions/StepPricingInfo'

  StepPricingInfo:
    type: object
    properties:
      sequence:
        type: string
        description: 'Sequence no of the line item'
      oneOffPrice:
        $ref: '#/definitions/Price'
      monthlyPrice:
        $ref: '#/definitions/Price'
      duration:
        type: string
        description: 'Duration from the start of the subscription for which this step pricing would be applicable'
      discountSkuIds:
        description: 'List of applicable discount sku Ids for this duration'
        type: array
        items:
          type: string
          format: uuid

  
  Price:
    type: object
    properties:
      gross:
        type: string
        description: 'Gross value of the item'
      net:
        type: string
        format: double
        description: 'Net value of the item'
      vat:
        type: string
        description: 'VAT component of the item price'
  
  
  VetOutcome:
    type: object
    properties:
      outcomeCode:
        type: string
        description: 'credit vet outcome code'
      availableRecurringChargeLimit:
        type: string
        description: 'Maximum available recurring charge'
      availableNumberOfConnections:
        type: string
        description: 'Maximum number of connections available'
      creditVetId:
        type: string
        description: 'Id of the credit vet transaction'
  BundlePrice:
    type: object
    properties:
      monthlyPrice:
        $ref: '#/definitions/Price'
      monthlyDiscountPrice:
        $ref: '#/definitions/Price'
      merchandisingPromotions:
        $ref: '#/definitions/MerchandisingPromotion'

  HardwarePrice:
    type: object
    properties:
      oneOffPrice:
        $ref: '#/definitions/Price'
      oneOffDiscountPrice:
        $ref: '#/definitions/Price'
      merchandisingPromotions:
        type: array
        items:
          $ref: '#/definitions/MerchandisingPromotion'
        description: 'Merchandising promotions applicable for the bundle'

  ServicePrice:
    type: object
    properties:
      oneOffPrice:
        $ref: '#/definitions/Price'
      monthlyPrice:
        $ref: '#/definitions/Price'
      merchandisingPromotions:
        $ref: '#/definitions/MerchandisingPromotion'

  MerchandisingPromotion:
    type: object
    properties:
      tag:
        type: string
        description: 'Tag value of the merchandising promotion'
      label:
        type: string
        description: 'Label value of the merchandising promotion'
      description:
        type: string
        description: 'Description value of merchandising promotion'
      discountId:
        type: string
        description: 'Discount skud Id, if applicable'
  
  CheckOutBasket:
    type: object
    properties:
      basketId:
        type: string
        format: guid
        description: 'Unique identifier for a basket'
      affiliateId:
        type: string
        description: 'Id of affiliate from which the basket creation was invoked'
      source:
        type: string
        description: 'Source system identifier (WCS, MOBAPP etc)'
      customerRequestedDate:
        type: string
        format: yyyy-mm-ddTHH:MM:SS.SSSZ
        description: 'Service request date specified by the customer'
      packages:
        type: array
        items:
          $ref: '#/definitions/CheckOutPackage'
      vetOutcome:
        $ref: '#/definitions/VetOutcome' 
      priceDetails:
        $ref: '#/definitions/PriceDetails'
      deliveryInfo:
        $ref: '#/definitions/DeliveryInfo'
      voucherCode:
         type: string
         description: 'voucher code  specified by the customer'
      voucherDescription:
         type: string
         description: 'voucher code  description'
      validated:
        type: boolean
      hashvalue:
        type: string
  CheckOutPackage:
    type: object
    properties:
      packageId:
        type: string
        format: guid
        description: 'Unique ID for the package'
      accountCategory:
        type: string
        description: 'If the package was constructed in a segment sensitive way, this field contains the segment (example customer or business)'
      sequence:
        type: integer
        format: int32
        description: 'Display sequence.  Make this the order the package was added to the basket (i.e. lowest number = highest display order)'
      packageType:
        type: string
        description: 'Type of the package. Possible list is "Acquisition", "Retention", "TariffMigration", "PreToPost", "Modify"'
      dependentOn:
        type: array
        items:
          type: string
        description: 'List of package Ids on which this package is dependent on'
      bundle:
          $ref: '#/definitions/CheckOutBundle'
      hardwares:
        type: array
        items:
          $ref: '#/definitions/CheckOutHardware'
      services:
        type: array
        items:
          $ref: '#/definitions/Service'
      priceDetails:
        $ref: '#/definitions/PriceDetails'
      discounts:
        type: array
        items:
          $ref: '#/definitions/Discount'
 
  CheckOutBundle:
    type: object
    properties:
      packageLineId:
        type: string
        format: guid
        description: 'unique id for this line item of the package'
      action:
        type: string
        description: 'Action to indicate the operation requested by the use on this particular bundle. Expected values are ADD/REMOVE/MODIFY'
      skuId:
        type: string
        description: 'Bundle id from the product catalogue'
      name:
        type: string
        description: 'Name of the bundle as provided in the product catalogue'
      displayName:
        type: string
        description: 'Name of the bundle as provided in the merchandising data'
      productClass:
        type: string
        description: 'Catalogue product class identifies products'
      paymentType:
        type: string
        description: 'Payment type of the bundle. For example, "postpaid", "prepaid" etc.'
      serviceId: 
        type: string
        description: 'Type of the bundle. For example, Standard, Red, RedPlus etc.'
      attributes:
        type: array
        items:
         $ref: '#/definitions/attribute'
      priceDetails:
        $ref: '#/definitions/BundlePrice'
      
  CheckOutHardware:
    type: object
    properties:
      packageLineId:
        type: string
        format: guid
        description: 'line id of the bundle in the package'
      action:
        type: string
        description: 'Expected list is ADD/REMOVE/MODIFY'
      skuId:
        type: string
        format: guid
        description: 'Id of the device as given in the product catalogue'
      name:
        type: string
        description: 'Name of the device as provided in the product catalogue'
      description:
        type: string
        description: 'Description of the device as provided in the product catalogue'
      displayName:
        type: string
        description: 'Name of the device as provided in the merchandising data'
      productClass:
        type: string
        description: 'Catalogue product class (identifies e.g. Delivery products)'
      boxPrice:
        $ref: '#/definitions/Price'
      attributes:
        type: array
        items:
         $ref: '#/definitions/attribute'
      priceDetails:
        $ref: '#/definitions/HardwarePrice'  

  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
      referenceId:
        type: string  

